#version 430

in vec3 origin, direction;
out vec4 outputColor;



struct Sphere {
    vec3 position;
    float radius;
    vec3 color;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct RayNode {
    Ray ray;
    vec3 color;
    int depth;
};

struct HitInfo {
    bool hitDetected;
    vec3 hitPoint;
    vec3 surfaceNormal;
    float distance;
    int objectid;
    vec3 color;
};

const int sphereNumber = 2;
Sphere spheres[2];
const int Max_Depth = 5;
const int Max_Nodes = 64;
float coeff = 1;
RayNode rayNode[Max_Nodes];

void sphereIntersect(Ray ray, int objectid, inout HitInfo hitInfo) {
    Sphere sphere = spheres[objectid];
    vec3 trackToSphere = ray.origin - sphere.position;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(trackToSphere, ray.direction);
    float c = dot(trackToSphere, trackToSphere) - sphere.radius * sphere.radius;
    float discriminant = b * b - 4.0 * a * c;    

    if (discriminant > 0.0) {
	float distance = (-b - sqrt(discriminant)) / (2.0 * a);
	if (distance > 0.0001 && hitInfo.objectid ==0 && (distance < hitInfo.distance && hitInfo.hitDetected || !hitInfo.hitDetected)) {
	    hitInfo.distance = distance;
	    hitInfo.hitPoint = ray.origin + ray.direction *  hitInfo.distance;
  	    hitInfo.surfaceNormal = normalize(hitInfo.hitPoint - sphere.position);
	    hitInfo.hitDetected = true;
	    hitInfo.objectid = objectid;
	    hitInfo.color = sphere.color;
	}
    }
}



vec3 iterativeRayTrace(Ray ray) {

    int numberOfNodes = 1, currentNodeIndex = 0;    

    Sphere sphere;

    sphere.position = vec3(-0.4, 0.2, -0.2);
    sphere.radius = 0.3;
    sphere.color = vec3(0.5, 0.7, 0.9);	
    spheres[0] = sphere;
    

    sphere.position = vec3(0.0, 0.0, -1.0);
    sphere.radius = 0.8;
    sphere.color = vec3(0.9, 0.5, 0.7);	
    spheres[1] = sphere;

   /* sphere.position = vec3(0.5, -0.3, -0.3);
    sphere.radius = 0.3;
    sphere.color = vec3(0.7, 0.5, 0.9);	
    spheres[2] = sphere;*/

    rayNode[currentNodeIndex].ray = ray;
    rayNode[currentNodeIndex].depth = 0;

    while (currentNodeIndex < numberOfNodes) {
	HitInfo hitInfo;
	hitInfo.hitDetected = false;

	sphereIntersect(ray,0, hitInfo);
        sphereIntersect(ray,1, hitInfo);
	//sphereIntersect(ray,2, hitInfo);

	if (hitInfo.hitDetected) {
   	coeff = (dot(ray.direction, hitInfo.surfaceNormal) * dot(ray.direction, hitInfo.surfaceNormal)) / ((dot(ray.direction, ray.direction)) * (dot(hitInfo.surfaceNormal, hitInfo.surfaceNormal)));

	rayNode[currentNodeIndex].color = hitInfo.color * coeff;
	}
	else rayNode[currentNodeIndex].color = vec3(0, 0, 0);
	currentNodeIndex++;
    }
    return rayNode[0].color;
}

	

void main()
{

    Ray ray = Ray(origin, direction);
    outputColor = vec4(iterativeRayTrace(ray), 1.0) ;
}